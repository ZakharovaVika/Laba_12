#3. Вычислить сумму знакопеременного ряда |х^(2n)|/(2n)!, где х-матрица ранга к
# (к и матрица задаются случайным образом), n - номер слагаемого. Сумма считается
# вычисленной, если точность вычислений будет не меньше t знаков после запятой.
# У алгоритма д.б. линейная сложность. Операция умножения –поэлементная. Знак первого слагаемого  -случайный.
import random
import numpy as np
from decimal import Decimal, getcontext

# Функция для вычисления суммы знакопеременного ряда
def sum_number(t):
    n = 1
    new_matrix = matrix.copy()
    factorial = 1  # Накопляемый факториал
    res = 0
    sign = random.choice([-1, 1])  # Переменная для изменения знака


    while True:
        element = Decimal(np.linalg.det(np.linalg.matrix_power(new_matrix, 2*n)) / factorial)  # Вычисляем текущий член
        res += sign * element  # Прибавляем  текущий член к результату


        if abs(element) < 1 / (10 ** t):
            break

        # Меняем параметры для следующего слагаемого
        n += 1
        sign = -sign
        factorial *= (2*n)

    return res

try:
    # Ввод значения t
    print("Введите число t, являющееся количеством знаков после запятой:")
    t = int(input())
    while t > 300 or t < 1:
        t = int(input("Вы ввели число, неподходящее по условию, введите число t, большее или равное 1, но иеньше 300:\n"))
    print()

    k = random.randint(2, 10)  # задание ранга матрицы
    matrix = np.round(np.random.uniform(-1, 1, (k, k)), 3)  # создание матрицы (элементы матрицы от -1 до +1)

    # вывод сформированной матрицы
    print("Случайно сгенерированная матрица:")
    print(matrix)

    # Установка точности вычислений
    getcontext().prec = t

    # Вызов функции для вычисления суммы ряда точностью t
    result = sum_number(t)

    # Вывод результата
    print(f"Сумма ряда с точностью {t} знаков после запятой: {result:.{t}f}")

except ValueError:
    print("\nВведенный символ не является числом. Перезапустите программу и введите число.")